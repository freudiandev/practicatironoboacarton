// üß™ TEST DIAGN√ìSTICO ESPEC√çFICO PARA MOUSE
// Este test ayuda a entender EXACTAMENTE qu√© est√° pasando con la direcci√≥n

console.log('üîç INICIANDO DIAGN√ìSTICO DE DIRECCI√ìN DE MOUSE');

// Test de direcci√≥n del mouse
function TEST_DIRECCION_MOUSE() {
  console.log('üìã === TEST DE DIRECCI√ìN DEL MOUSE ===');
  
  // Verificar que el juego est√© cargado
  if (typeof game === 'undefined') {
    console.log('‚ùå Juego no encontrado. Espera a que cargue completamente.');
    return;
  }
  
  console.log('‚úÖ Juego encontrado, verificando controles...');
  
  // Acceder al sistema de input
  const inputSystem = game.input;
  if (!inputSystem) {
    console.log('‚ùå Sistema de input no encontrado');
    return;
  }
  
  console.log('‚úÖ Sistema de input encontrado');
  
  // Test manual paso a paso
  console.log('\nüéØ INSTRUCCIONES DE TEST:');
  console.log('1. üì∏ Mira hacia adelante (nota la direcci√≥n de las paredes)');
  console.log('2. üñ±Ô∏è Haz CLIC en el canvas para capturar el mouse');
  console.log('3. üëâ Mueve el mouse LENTAMENTE hacia la DERECHA');
  console.log('4. ü§î ¬øLa vista gira hacia la DERECHA o IZQUIERDA?');
  console.log('5. üëà Mueve el mouse LENTAMENTE hacia la IZQUIERDA');
  console.log('6. ü§î ¬øLa vista gira hacia la IZQUIERDA o DERECHA?');
  
  // Monitor en tiempo real
  let monitorInterval;
  
  function startMonitoring() {
    console.log('\nüîÑ Iniciando monitoreo en tiempo real...');
    console.log('üí° Mueve el mouse y observa los valores:');
    
    monitorInterval = setInterval(() => {
      if (inputSystem.pointerLocked) {
        const rotation = inputSystem.getMouseRotation();
        if (Math.abs(rotation.horizontal) > 0.001) {
          const direction = rotation.horizontal > 0 ? 'DERECHA' : 'IZQUIERDA';
          const angleBefore = game.player.angle;
          
          console.log(`üéØ ROTACI√ìN DETECTADA:`);
          console.log(`   üñ±Ô∏è Valor: ${rotation.horizontal.toFixed(4)}`);
          console.log(`   üß≠ Direcci√≥n calculada: ${direction}`);
          console.log(`   üîÑ √Ångulo antes: ${angleBefore.toFixed(4)}`);
          
          // Simular el c√°lculo que hace updatePlayer
          const newAngle = angleBefore - rotation.horizontal;
          console.log(`   ‚û°Ô∏è √Ångulo despu√©s: ${newAngle.toFixed(4)}`);
          
          // Determinar direcci√≥n visual
          const deltaAngle = newAngle - angleBefore;
          const visualDirection = deltaAngle > 0 ? 'IZQUIERDA' : 'DERECHA';
          console.log(`   üëÅÔ∏è Direcci√≥n visual: gira hacia la ${visualDirection}`);
          console.log('   ----------------------------------------');
        }
      }
    }, 100);
  }
  
  function stopMonitoring() {
    if (monitorInterval) {
      clearInterval(monitorInterval);
      console.log('‚èπÔ∏è Monitoreo detenido');
    }
  }
  
  // Controles del test
  console.log('\nüéÆ CONTROLES DEL TEST:');
  console.log('‚Ä¢ TEST_DIRECCION_MOUSE.start() - Iniciar monitoreo');
  console.log('‚Ä¢ TEST_DIRECCION_MOUSE.stop() - Detener monitoreo');
  
  return {
    start: startMonitoring,
    stop: stopMonitoring,
    info: () => {
      console.log(`üîí Mouse capturado: ${inputSystem.pointerLocked}`);
      console.log(`üß≠ √Ångulo actual: ${game.player.angle.toFixed(4)}`);
      console.log(`üñ±Ô∏è Mouse X: ${inputSystem.mouse.x.toFixed(4)}`);
      console.log(`üñ±Ô∏è Mouse Y: ${inputSystem.mouse.y.toFixed(4)}`);
    }
  };
}

// Test de valores espec√≠ficos
function TEST_VALORES_ESPECIFICOS() {
  console.log('\nüî¨ === TEST DE VALORES ESPEC√çFICOS ===');
  
  // Simular valores espec√≠ficos
  const testCases = [
    { movementX: 10, expected: 'DERECHA' },
    { movementX: -10, expected: 'IZQUIERDA' },
    { movementX: 5, expected: 'DERECHA' },
    { movementX: -5, expected: 'IZQUIERDA' }
  ];
  
  testCases.forEach((testCase, index) => {
    console.log(`\nüìù Caso ${index + 1}: movementX = ${testCase.movementX}`);
    
    // Simular el c√°lculo completo
    const mouseX = testCase.movementX * 0.002; // Sensibilidad t√≠pica
    const rotationHorizontal = mouseX;
    
    console.log(`   üñ±Ô∏è mouseX acumulado: ${mouseX.toFixed(4)}`);
    console.log(`   üîÑ rotation.horizontal: ${rotationHorizontal.toFixed(4)}`);
    
    // Simular updatePlayer
    const initialAngle = 0;
    const newAngle = initialAngle - rotationHorizontal; // L√≥gica actual
    
    console.log(`   üß≠ Cambio de √°ngulo: ${(newAngle - initialAngle).toFixed(4)}`);
    
    const actualDirection = newAngle < initialAngle ? 'DERECHA' : 'IZQUIERDA';
    const isCorrect = actualDirection === testCase.expected;
    
    console.log(`   üéØ Direcci√≥n esperada: ${testCase.expected}`);
    console.log(`   üëÅÔ∏è Direcci√≥n actual: ${actualDirection}`);
    console.log(`   ${isCorrect ? '‚úÖ' : '‚ùå'} Resultado: ${isCorrect ? 'CORRECTO' : 'INCORRECTO'}`);
  });
}

// Ejecutar tests autom√°ticamente
setTimeout(() => {
  TEST_VALORES_ESPECIFICOS();
  
  console.log('\nüöÄ TEST MANUAL DISPONIBLE:');
  console.log('Ejecuta: TEST_DIRECCION_MOUSE()');
}, 1000);

// Exportar para uso manual
window.TEST_DIRECCION_MOUSE = TEST_DIRECCION_MOUSE;
window.TEST_VALORES_ESPECIFICOS = TEST_VALORES_ESPECIFICOS;
