/**
 * LIMPIEZA DE INDICADORES DUPLICADOS
 * Elimina indicadores visuales duplicados y asegura que solo haya uno
 */

console.log('üßπ === LIMPIEZA DE INDICADORES DUPLICADOS ===');

class DuplicateIndicatorCleaner {
  constructor() {
    this.cleanupAttempts = 0;
    this.maxAttempts = 5;
    
    console.log('üßπ Iniciando limpieza de indicadores duplicados...');
    this.startCleanup();
  }
  
  startCleanup() {
    // Ejecutar limpieza inmediata
    this.cleanDuplicateIndicators();
    
    // Configurar limpieza peri√≥dica para prevenir duplicados futuros
    this.setupPeriodicCleanup();
    
    // Configurar observer para detectar nuevos duplicados
    this.setupDuplicateDetection();
  }
  
  cleanDuplicateIndicators() {
    this.cleanupAttempts++;
    
    console.log(`üîç Buscando indicadores duplicados (intento ${this.cleanupAttempts})...`);
    
    // Buscar todos los elementos con ID o clase relacionada con learning memory
    const indicators = document.querySelectorAll('[id*="learning-memory"], [class*="learning-memory"]');
    const voiceIndicators = document.querySelectorAll('[id*="memory-voice"], [class*="memory-voice"]');
    
    // Combinar ambas b√∫squedas
    const allIndicators = [...indicators, ...voiceIndicators];
    
    if (allIndicators.length === 0) {
      console.log('‚úÖ No se encontraron indicadores para limpiar');
      return;
    }
    
    if (allIndicators.length === 1) {
      console.log('‚úÖ Solo hay un indicador (correcto)');
      this.optimizeExistingIndicator(allIndicators[0]);
      return;
    }
    
    console.log(`üßπ Encontrados ${allIndicators.length} indicadores, limpiando duplicados...`);
    
    // Mantener solo el mejor indicador
    const bestIndicator = this.selectBestIndicator(allIndicators);
    
    // Eliminar todos los dem√°s
    allIndicators.forEach(indicator => {
      if (indicator !== bestIndicator) {
        console.log(`üóëÔ∏è Eliminando indicador duplicado: ${indicator.id || indicator.className}`);
        indicator.remove();
      }
    });
    
    // Optimizar el indicador que qued√≥
    if (bestIndicator) {
      this.optimizeExistingIndicator(bestIndicator);
      console.log('‚úÖ Limpieza completada, indicador √∫nico optimizado');
    }
  }
  
  selectBestIndicator(indicators) {
    // Criterios para seleccionar el mejor indicador:
    // 1. Que tenga ID 'learning-memory-voice'
    // 2. Que tenga mayor contenido
    // 3. Que est√© posicionado correctamente
    // 4. Que tenga estilos m√°s avanzados
    
    let bestIndicator = null;
    let bestScore = -1;
    
    indicators.forEach(indicator => {
      let score = 0;
      
      // Preferir ID espec√≠fico
      if (indicator.id === 'learning-memory-voice') score += 10;
      
      // Preferir indicadores con m√°s contenido
      if (indicator.innerHTML.length > 100) score += 5;
      
      // Preferir indicadores posicionados
      const styles = window.getComputedStyle(indicator);
      if (styles.position === 'fixed') score += 3;
      if (styles.zIndex && parseInt(styles.zIndex) > 1000) score += 2;
      
      // Preferir indicadores con animaci√≥n
      if (styles.animation && styles.animation !== 'none') score += 2;
      
      // Preferir indicadores visibles
      if (styles.display !== 'none' && styles.visibility !== 'hidden') score += 1;
      
      console.log(`üìä Indicador ${indicator.id || 'sin-id'}: puntuaci√≥n ${score}`);
      
      if (score > bestScore) {
        bestScore = score;
        bestIndicator = indicator;
      }
    });
    
    console.log(`üèÜ Mejor indicador seleccionado: ${bestIndicador?.id || 'sin-id'} (puntuaci√≥n: ${bestScore})`);
    
    return bestIndicator;
  }
  
  optimizeExistingIndicator(indicator) {
    console.log('üîß Optimizando indicador seleccionado...');
    
    // Asegurar ID correcto
    if (!indicator.id) {
      indicator.id = 'learning-memory-voice';
    }
    
    // Optimizar estilos
    indicator.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(0, 50, 0, 0.95);
      color: #00ff00;
      padding: 12px;
      border-radius: 10px;
      font-family: 'Courier New', monospace;
      font-size: 11px;
      max-width: 320px;
      z-index: 9999;
      border: 3px solid #00ff00;
      box-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
      animation: pulse 2s infinite;
    `;
    
    // Asegurar animaci√≥n CSS
    if (!document.querySelector('#voice-indicator-animation')) {
      const style = document.createElement('style');
      style.id = 'voice-indicator-animation';
      style.textContent = `
        @keyframes pulse {
          0% { box-shadow: 0 0 15px rgba(0, 255, 0, 0.5); }
          50% { box-shadow: 0 0 25px rgba(0, 255, 0, 0.8); }
          100% { box-shadow: 0 0 15px rgba(0, 255, 0, 0.5); }
        }
      `;
      document.head.appendChild(style);
    }
    
    // Optimizar contenido si est√° vac√≠o o es b√°sico
    if (indicator.innerHTML.length < 50 || !indicator.innerHTML.includes('LEARNING MEMORY')) {
      indicator.innerHTML = `
        ü§ñüõ°Ô∏è <strong>LEARNING MEMORY</strong><br>
        <span style="color: #00ffff;">SISTEMA UNIFICADO ACTIVO</span><br>
        <span id="memory-status">üîç Monitoreando sistemas...</span>
      `;
    }
    
    // Asegurar que el elemento de estado existe
    if (!indicator.querySelector('#memory-status')) {
      const statusSpan = document.createElement('span');
      statusSpan.id = 'memory-status';
      statusSpan.textContent = 'üîç Monitoreando sistemas...';
      indicator.appendChild(document.createElement('br'));
      indicator.appendChild(statusSpan);
    }
    
    console.log('‚úÖ Indicador optimizado correctamente');
  }
  
  setupPeriodicCleanup() {
    // Ejecutar limpieza cada 10 segundos para prevenir duplicados
    setInterval(() => {
      const indicators = document.querySelectorAll('[id*="learning-memory"], [class*="learning-memory"]');
      if (indicators.length > 1) {
        console.log('üßπ Detectados duplicados, ejecutando limpieza peri√≥dica...');
        this.cleanDuplicateIndicators();
      }
    }, 10000);
    
    console.log('‚è∞ Limpieza peri√≥dica configurada (cada 10 segundos)');
  }
  
  setupDuplicateDetection() {
    // Observar cambios en el DOM para detectar nuevos indicadores
    const observer = new MutationObserver((mutations) => {
      let newIndicatorAdded = false;
      
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) { // Element node
            if (node.id && node.id.includes('learning-memory')) {
              newIndicatorAdded = true;
            }
            // Tambi√©n verificar descendientes
            const descendants = node.querySelectorAll ? node.querySelectorAll('[id*="learning-memory"]') : [];
            if (descendants.length > 0) {
              newIndicatorAdded = true;
            }
          }
        });
      });
      
      if (newIndicatorAdded) {
        console.log('üîç Nuevo indicador detectado, verificando duplicados...');
        setTimeout(() => {
          this.cleanDuplicateIndicators();
        }, 500); // Peque√±o delay para permitir que se complete la adici√≥n
      }
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
    
    console.log('üëÅÔ∏è Observer de duplicados configurado');
  }
  
  // M√©todo p√∫blico para limpieza manual
  forceCleanup() {
    console.log('üßπ Limpieza forzada solicitada...');
    this.cleanDuplicateIndicators();
  }
  
  // M√©todo para obtener estad√≠sticas
  getCleanupStats() {
    const indicators = document.querySelectorAll('[id*="learning-memory"], [class*="learning-memory"]');
    return {
      currentIndicators: indicators.length,
      cleanupAttempts: this.cleanupAttempts,
      timestamp: Date.now()
    };
  }
}

// Inicializar limpiador inmediatamente
const duplicateCleaner = new DuplicateIndicatorCleaner();

// Hacer disponible globalmente
window.duplicateCleaner = duplicateCleaner;

// Tambi√©n ejecutar despu√©s de que todos los scripts se hayan cargado
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    duplicateCleaner.forceCleanup();
  }, 2000);
});

// Y otra limpieza despu√©s de que todo est√© completamente cargado
window.addEventListener('load', () => {
  setTimeout(() => {
    duplicateCleaner.forceCleanup();
  }, 1000);
});

console.log('üßπ Sistema de limpieza de duplicados cargado');
console.log('üìû Comando manual: window.duplicateCleaner.forceCleanup()');
